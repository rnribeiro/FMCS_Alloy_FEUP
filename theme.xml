<alloy builddate="2021-11-03T15:25:43.736Z">

<instance bitwidth="4" maxseq="5" mintrace="1" maxtrace="10" command="Run run$1 for 5 but exactly 6 VSS" filename="C:\Ricardo\MEIC\FMCS\FMCS_FEUP\project.als" tracelength="1" backloop="0">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Train" ID="4" parentID="2">
</sig>

<field label="position" ID="5" parentID="4" var="yes">
   <types> <type ID="4"/> <type ID="6"/> </types>
</field>

<sig label="this/Track" ID="7" parentID="2">
   <atom label="Track$0"/>
   <atom label="Track$1"/>
   <atom label="Track$2"/>
</sig>

<field label="vss" ID="8" parentID="7">
   <tuple> <atom label="Track$0"/> <atom label="VSS$3"/> </tuple>
   <tuple> <atom label="Track$1"/> <atom label="VSS$2"/> </tuple>
   <tuple> <atom label="Track$1"/> <atom label="VSS$4"/> </tuple>
   <tuple> <atom label="Track$2"/> <atom label="VSS$0"/> </tuple>
   <tuple> <atom label="Track$2"/> <atom label="VSS$1"/> </tuple>
   <tuple> <atom label="Track$2"/> <atom label="VSS$5"/> </tuple>
   <types> <type ID="7"/> <type ID="6"/> </types>
</field>

<sig label="this/VSS" ID="6" parentID="2">
   <atom label="VSS$0"/>
   <atom label="VSS$1"/>
   <atom label="VSS$2"/>
   <atom label="VSS$3"/>
   <atom label="VSS$4"/>
   <atom label="VSS$5"/>
</sig>

<field label="successor" ID="9" parentID="6">
   <tuple> <atom label="VSS$0"/> <atom label="VSS$4"/> </tuple>
   <tuple> <atom label="VSS$1"/> <atom label="VSS$3"/> </tuple>
   <tuple> <atom label="VSS$2"/> <atom label="VSS$1"/> </tuple>
   <tuple> <atom label="VSS$3"/> <atom label="VSS$0"/> </tuple>
   <tuple> <atom label="VSS$5"/> <atom label="VSS$2"/> </tuple>
   <types> <type ID="6"/> <type ID="6"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<sig label="this/Connected" ID="10" var="yes">
   <type ID="4"/>
</sig>

<sig label="this/begin" ID="11" one="yes">
   <atom label="VSS$5"/>
   <type ID="6"/>
</sig>

<sig label="this/end" ID="12" one="yes">
   <atom label="VSS$4"/>
   <type ID="6"/>
</sig>

<sig label="this/Free" ID="13" var="yes">
   <atom label="VSS$1"/>
   <atom label="VSS$3"/>
   <atom label="VSS$5"/>
   <type ID="6"/>
</sig>

<sig label="this/Occupied" ID="14" var="yes">
   <atom label="VSS$0"/>
   <atom label="VSS$2"/>
   <atom label="VSS$4"/>
   <type ID="6"/>
</sig>

<sig label="this/Unknown" ID="15" var="yes">
   <type ID="6"/>
</sig>

</instance>

<source filename="C:\Ricardo\MEIC\FMCS\FMCS_FEUP\project.als" content="/*&#x000a;extends -&gt; is a, subset of a parent, siblings are disjoint&#x000a;&#x000a;Top-level signatures are disjoint&#x000a;&#x000a;Facts specify assumptions&#x000a;&#x000a;lone 0..1&#x000a;some 1..*&#x000a;&#x000a;&#x000a;*/&#x000a;&#x000a;// Train Entity&#x000a;sig Train {&#x000a;&#x0009;/* cars : some Car // each train is composed of at least one car*/&#x000a;&#x0009;var position : one VSS&#x000a;}&#x000a;var sig Connected in Train {}&#x000a;&#x000a;// Track Entity&#x000a;sig Track {&#x000a;&#x0009;vss : some VSS // Each track is composed of at least one VSS&#x000a;}&#x000a;&#x000a;// VSS Entity&#x000a;sig VSS {&#x000a;&#x0009;successor : lone VSS, // Each VSS can have a successor&#x000a;}&#x000a;&#x000a;one sig begin, end in VSS {}&#x000a;&#x000a;/* Car Entity&#x000a;sig Car {&#x000a;&#x0009;var position : one VSS, // Each car has to be in a (varying) VSS&#x000a;&#x0009;succ : lone Car // Each car can have a successor&#x000a;}&#x000a;*/&#x000a;&#x0009;&#x000a;// 3 Kinds of State&#x000a;var sig Free, Occupied, Unknown in VSS {}&#x000a;&#x000a;fact Multiplicities {&#x000a;&#x0009;vss in Track one -&gt; some VSS&#x000a;&#x000a;}&#x000a;&#x000a;fact linearTrack {&#x000a;&#x0009;// The track forms a single line between begin and end VSS&apos;s&#x000a;&#x0009;VSS in begin.*successor&#x000a;&#x0009;successor in (VSS - end) one -&gt; one (VSS - begin)&#x000a;}&#x000a;&#x000a;// A VSS can only have one state at once&#x000a;fact onlyOneState {&#x000a;&#x0009;no Free &amp; Occupied &amp; Unknown&#x000a;}&#x000a;&#x000a;&#x000a;// Goal - No 2 trains in the same VSS&#x000a;assert fullSafety {&#x000a;&#x0009;position in Train lone -&gt; one VSS&#x000a;}&#x000a;&#x000a;&#x000a;run {} for 5 but exactly 6 VSS&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;&#x000a;"/>

<source filename="\$alloy4$\models\util\integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
